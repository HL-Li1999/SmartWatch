<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\HellowWorld.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\HellowWorld.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Sun Aug 18 05:01:02 2024
<BR><P>
<H3>Maximum Stack Usage =        444 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Gyro_Task &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from createtask.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from createtask.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from createtask.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">Gyro_Task</a> from gyrotask.o(i.Gyro_Task) referenced from createtask.o(i.CreateAllTask)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">Led_Task</a> from ledtask.o(i.Led_Task) referenced from createtask.o(i.CreateAllTask)
 <LI><a href="#[3b]">Light_Task</a> from lighttask.o(i.Light_Task) referenced from createtask.o(i.CreateAllTask)
 <LI><a href="#[38]">MainClock_Callback</a> from createtask.o(i.MainClock_Callback) referenced from createtask.o(i.CreateAllTask)
 <LI><a href="#[39]">MainITF_Task</a> from mainitf.o(i.MainITF_Task) referenced from createtask.o(i.CreateAllTask)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">Menu_Task</a> from menutask.o(i.Menu_Task) referenced from createtask.o(i.CreateAllTask)
 <LI><a href="#[3f]">Motor_Task</a> from motortask.o(i.Motor_Task) referenced from createtask.o(i.CreateAllTask)
 <LI><a href="#[3e]">Music_Task</a> from musictask.o(i.Music_Task) referenced from createtask.o(i.CreateAllTask)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[51]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">Servo_Task</a> from servotask.o(i.Servo_Task) referenced from createtask.o(i.CreateAllTask)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[44]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[43]">fputc</a> from bsp_usart.o(i.fputc) referenced from printf6.o(i.__0printf$6)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4c]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[45]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[4d]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[50]">u8g2_draw_l90_r0</a> from u8g2_setup.o(i.u8g2_draw_l90_r0) referenced from u8g2_setup.o(.constdata)
 <LI><a href="#[47]">u8g2_font_calc_vref_font</a> from u8g2_font.o(i.u8g2_font_calc_vref_font) referenced from u8g2_font.o(i.u8g2_SetFontPosBaseline)
 <LI><a href="#[41]">u8g2_gpio_and_delay_stm32</a> from myu8g2.o(i.u8g2_gpio_and_delay_stm32) referenced from myu8g2.o(i.MyU8G2_Init)
 <LI><a href="#[4a]">u8g2_ll_hvline_vertical_top_lsb</a> from u8g2_ll_hvline.o(i.u8g2_ll_hvline_vertical_top_lsb) referenced from u8g2_d_setup.o(i.u8g2_Setup_ssd1306_i2c_128x64_noname_f)
 <LI><a href="#[4e]">u8g2_update_dimension_r0</a> from u8g2_setup.o(i.u8g2_update_dimension_r0) referenced from u8g2_setup.o(.constdata)
 <LI><a href="#[4f]">u8g2_update_page_win_r0</a> from u8g2_setup.o(i.u8g2_update_page_win_r0) referenced from u8g2_setup.o(.constdata)
 <LI><a href="#[46]">u8x8_ascii_next</a> from u8x8_8x8.o(i.u8x8_ascii_next) referenced from u8g2_font.o(i.u8g2_DrawStr)
 <LI><a href="#[42]">u8x8_byte_sw_i2c</a> from u8x8_byte.o(i.u8x8_byte_sw_i2c) referenced from myu8g2.o(i.MyU8G2_Init)
 <LI><a href="#[48]">u8x8_cad_ssd13xx_fast_i2c</a> from u8x8_cad.o(i.u8x8_cad_ssd13xx_fast_i2c) referenced from u8g2_d_setup.o(i.u8g2_Setup_ssd1306_i2c_128x64_noname_f)
 <LI><a href="#[49]">u8x8_d_ssd1306_128x64_noname</a> from u8x8_d_ssd1306_128x64_noname.o(i.u8x8_d_ssd1306_128x64_noname) referenced from u8g2_d_setup.o(i.u8g2_Setup_ssd1306_i2c_128x64_noname_f)
 <LI><a href="#[4b]">u8x8_dummy_cb</a> from u8x8_setup.o(i.u8x8_dummy_cb) referenced from u8x8_setup.o(i.u8x8_SetupDefaults)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[140]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[52]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[61]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[141]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[142]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[143]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[144]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[145]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[139]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[51]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))

<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearBuffer
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBeep
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBeep
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBeep
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBeep
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBeep
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[14d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[59]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[14f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[150]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CreateAllTask</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, createtask.o(i.CreateAllTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CreateAllTask &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>Delay_ms</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, delay.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_gpio_and_delay_stm32
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_s
</UL>

<P><STRONG><a name="[6b]"></a>Delay_s</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, delay.o(i.Delay_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_s &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>Delay_us</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, delay.o(i.Delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_gpio_and_delay_stm32
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[6c]"></a>DrawUI</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, menutask.o(i.DrawUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = DrawUI &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyU8G2_SetFontTiny
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SendBuffer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearBuffer
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawXBMP
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawStr
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemMove_Right
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemMove_Left
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Task
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, createtask.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EXTI0_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, createtask.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EXTI15_10_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, createtask.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EXTI1_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPortInit
</UL>

<P><STRONG><a name="[bd]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[bc]"></a>FLASH_SetLatency</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[89]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPortInit
</UL>

<P><STRONG><a name="[88]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPortInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicPortInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPortInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPortInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPortInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Init
</UL>

<P><STRONG><a name="[74]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SDA_R
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Init
</UL>

<P><STRONG><a name="[8f]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SDA_W
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SCL_W
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVecocity
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightTwinkle
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task
</UL>

<P><STRONG><a name="[78]"></a>GetMPU_Data</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, mpu6050.o(i.GetMPU_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetMPU_Data &rArr; ReadDataFromMPU &rArr; MyI2C_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromMPU
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AvrData
</UL>

<P><STRONG><a name="[7a]"></a>GetMinStr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, createtask.o(i.GetMinStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetMinStr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainITF_Task
</UL>

<P><STRONG><a name="[7c]"></a>GetSecStr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, createtask.o(i.GetSecStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetSecStr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainITF_Task
</UL>

<P><STRONG><a name="[7d]"></a>Get_AvrData</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, gyrotask.o(i.Get_AvrData))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Get_AvrData &rArr; GetMPU_Data &rArr; ReadDataFromMPU &rArr; MyI2C_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMPU_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Task
</UL>

<P><STRONG><a name="[40]"></a>Gyro_Task</STRONG> (Thumb, 330 bytes, Stack size 240 bytes, gyrotask.o(i.Gyro_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = Gyro_Task &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyU8G2_SetFontTiny
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SendBuffer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearBuffer
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawStr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AvrData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> createtask.o(i.CreateAllTask)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>InitAllItems</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, menutask.o(i.InitAllItems))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitAllItems &rArr; InitItem
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitItem
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Task
</UL>

<P><STRONG><a name="[83]"></a>InitItem</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, menutask.o(i.InitItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitItem
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllItems
</UL>

<P><STRONG><a name="[84]"></a>ItemMove_Left</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, menutask.o(i.ItemMove_Left))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ItemMove_Left &rArr; DrawUI &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Task
</UL>

<P><STRONG><a name="[85]"></a>ItemMove_Right</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, menutask.o(i.ItemMove_Right))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ItemMove_Right &rArr; DrawUI &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Task
</UL>

<P><STRONG><a name="[86]"></a>KeyPortInit</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, main.o(i.KeyPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = KeyPortInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>LedPortInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.LedPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LedPortInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>Led_Task</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, ledtask.o(i.Led_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Led_Task &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyU8G2_SetFontTiny
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SendBuffer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearBuffer
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawStr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightTwinkle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> createtask.o(i.CreateAllTask)
</UL>
<P><STRONG><a name="[90]"></a>LightOff</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lighttask.o(i.LightOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = LightOff &rArr; u8g2_DrawXBMP &rArr; u8g2_DrawHXBMP &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SendBuffer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearBuffer
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawXBMP
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Task
</UL>

<P><STRONG><a name="[91]"></a>LightOn</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lighttask.o(i.LightOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = LightOn &rArr; u8g2_DrawXBMP &rArr; u8g2_DrawHXBMP &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SendBuffer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearBuffer
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawXBMP
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawBox
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Task
</UL>

<P><STRONG><a name="[8e]"></a>LightTwinkle</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ledtask.o(i.LightTwinkle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LightTwinkle &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task
</UL>

<P><STRONG><a name="[3b]"></a>Light_Task</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lighttask.o(i.Light_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Light_Task &rArr; LightOn &rArr; u8g2_DrawXBMP &rArr; u8g2_DrawHXBMP &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightOn
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> createtask.o(i.CreateAllTask)
</UL>
<P><STRONG><a name="[93]"></a>MPU_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mpu6050.o(i.MPU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_Init &rArr; WriteData2MPU &rArr; MyI2C_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData2MPU
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>MainClock_Callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, createtask.o(i.MainClock_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MainClock_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> createtask.o(i.CreateAllTask)
</UL>
<P><STRONG><a name="[39]"></a>MainITF_Task</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, mainitf.o(i.MainITF_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = MainITF_Task &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyU8G2_SetFontBig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SendBuffer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearBuffer
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawStr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecStr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> createtask.o(i.CreateAllTask)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>Menu_Task</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, menutask.o(i.Menu_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Menu_Task &rArr; ItemMove_Right &rArr; DrawUI &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemMove_Right
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemMove_Left
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllItems
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> createtask.o(i.CreateAllTask)
</UL>
<P><STRONG><a name="[97]"></a>MotorPortInit</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, main.o(i.MotorPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MotorPortInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>Motor_Task</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, motortask.o(i.Motor_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Motor_Task &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyU8G2_SetFontTiny
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SendBuffer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearBuffer
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawStr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVecocity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> createtask.o(i.CreateAllTask)
</UL>
<P><STRONG><a name="[9f]"></a>MusicPortInit</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, main.o(i.MusicPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MusicPortInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>Music_Task</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, musictask.o(i.Music_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Music_Task &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyU8G2_SetFontTiny
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SendBuffer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearBuffer
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawXBMP
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawStr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayMusic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> createtask.o(i.CreateAllTask)
</UL>
<P><STRONG><a name="[a4]"></a>MyI2C_End</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, myi2c.o(i.MyI2C_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MyI2C_End
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SDA_W
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SCL_W
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData2MPU
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromMPU
</UL>

<P><STRONG><a name="[94]"></a>MyI2C_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, myi2c.o(i.MyI2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MyI2C_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyU8G2_Init
</UL>

<P><STRONG><a name="[a8]"></a>MyI2C_RecArc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, myi2c.o(i.MyI2C_RecArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MyI2C_RecArc
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SDA_W
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SDA_R
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SCL_W
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData2MPU
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromMPU
</UL>

<P><STRONG><a name="[aa]"></a>MyI2C_RecData</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, myi2c.o(i.MyI2C_RecData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MyI2C_RecData
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SDA_W
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SDA_R
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SCL_W
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromMPU
</UL>

<P><STRONG><a name="[a6]"></a>MyI2C_SCL_W</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, myi2c.o(i.MyI2C_SCL_W))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_gpio_and_delay_stm32
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendArc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_RecData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_RecArc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_End
</UL>

<P><STRONG><a name="[a9]"></a>MyI2C_SDA_R</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, myi2c.o(i.MyI2C_SDA_R))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_RecData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_RecArc
</UL>

<P><STRONG><a name="[a5]"></a>MyI2C_SDA_W</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, myi2c.o(i.MyI2C_SDA_W))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_gpio_and_delay_stm32
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendArc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_RecData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_RecArc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_End
</UL>

<P><STRONG><a name="[ab]"></a>MyI2C_SendArc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, myi2c.o(i.MyI2C_SendArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MyI2C_SendArc
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SDA_W
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SCL_W
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromMPU
</UL>

<P><STRONG><a name="[ac]"></a>MyI2C_SendData</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, myi2c.o(i.MyI2C_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MyI2C_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SDA_W
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SCL_W
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData2MPU
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromMPU
</UL>

<P><STRONG><a name="[ad]"></a>MyI2C_Start</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, myi2c.o(i.MyI2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MyI2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SDA_W
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SCL_W
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData2MPU
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromMPU
</UL>

<P><STRONG><a name="[ae]"></a>MyU8G2_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, myu8g2.o(i.MyU8G2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MyU8G2_Init &rArr; u8g2_ClearDisplay &rArr; u8g2_NextPage &rArr; u8g2_send_buffer &rArr; u8x8_DrawTile
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_SetPowerSave
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_InitDisplay
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_Setup_ssd1306_i2c_128x64_noname_f
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearDisplay
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>MyU8G2_SetFontBig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, myu8g2.o(i.MyU8G2_SetFontBig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MyU8G2_SetFontBig &rArr; u8g2_SetFont &rArr; u8g2_read_font_info
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainITF_Task
</UL>

<P><STRONG><a name="[6d]"></a>MyU8G2_SetFontTiny</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, myu8g2.o(i.MyU8G2_SetFontTiny))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MyU8G2_SetFontTiny &rArr; u8g2_SetFont &rArr; u8g2_read_font_info
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Task
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Task
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Task
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Task
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPortInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[8b]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPortInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[a3]"></a>PlayMusic</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, musictask.o(i.PlayMusic))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PlayMusic &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBeep
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Task
</UL>

<P><STRONG><a name="[98]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPortInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicPortInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPortInit
</UL>

<P><STRONG><a name="[87]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPortInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicPortInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPortInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPortInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPortInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Init
</UL>

<P><STRONG><a name="[b6]"></a>RCC_DeInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[cc]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[c0]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[c2]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[b9]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[b7]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[b5]"></a>RCC_HSE_Configuration</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, rcc.o(i.RCC_HSE_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_HSE_Configuration &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[bb]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[bf]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[be]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[c1]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[b8]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
</UL>

<P><STRONG><a name="[79]"></a>ReadDataFromMPU</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, mpu6050.o(i.ReadDataFromMPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadDataFromMPU &rArr; MyI2C_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendArc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_RecData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_RecArc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_End
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMPU_Data
</UL>

<P><STRONG><a name="[c3]"></a>ServoPortInit</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, main.o(i.ServoPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ServoPortInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>Servo_Task</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, servotask.o(i.Servo_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Servo_Task &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyU8G2_SetFontTiny
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SendBuffer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearBuffer
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawStr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAngle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> createtask.o(i.CreateAllTask)
</UL>
<P><STRONG><a name="[c4]"></a>SetAngle</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, servotask.o(i.SetAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetAngle &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Task
</UL>

<P><STRONG><a name="[b4]"></a>SetBeep</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, musictask.o(i.SetBeep))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetBeep &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayMusic
</UL>

<P><STRONG><a name="[9e]"></a>SetVecocity</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, motortask.o(i.SetVecocity))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetVecocity
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Task
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPortInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicPortInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPortInit
</UL>

<P><STRONG><a name="[99]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_InternalClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPortInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicPortInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPortInit
</UL>

<P><STRONG><a name="[a0]"></a>TIM_OC1Init</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicPortInit
</UL>

<P><STRONG><a name="[9c]"></a>TIM_OC4Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPortInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPortInit
</UL>

<P><STRONG><a name="[9b]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPortInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicPortInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPortInit
</UL>

<P><STRONG><a name="[a1]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetAutoreload))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicPortInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBeep
</UL>

<P><STRONG><a name="[a2]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicPortInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBeep
</UL>

<P><STRONG><a name="[c5]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVecocity
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAngle
</UL>

<P><STRONG><a name="[9a]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPortInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicPortInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPortInit
</UL>

<P><STRONG><a name="[cb]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[c8]"></a>USART_Config</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, bsp_usart.o(i.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[ca]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[c9]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[d3]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>WriteData2MPU</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mpu6050.o(i.WriteData2MPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteData2MPU &rArr; MyI2C_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_RecArc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_End
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[cd]"></a>__0printf$6</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[151]"></a>__1printf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)

<P><STRONG><a name="[76]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAngle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[152]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[7b]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Task
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Task
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecStr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinStr
</UL>

<P><STRONG><a name="[153]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[154]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[155]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[43]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0printf$6)
</UL>
<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main &rArr; CreateAllTask &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAllTask
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPortInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MusicPortInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPortInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPortInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPortInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyU8G2_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSE_Configuration
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[fe]"></a>pvPortMalloc</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[ee]"></a>pxPortInitialiseStack</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[6e]"></a>u8g2_ClearBuffer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, u8g2_buffer.o(i.u8g2_ClearBuffer))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_NextPage
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_FirstPage
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightOn
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightOff
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Task
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Task
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Task
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainITF_Task
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Task
</UL>

<P><STRONG><a name="[b2]"></a>u8g2_ClearDisplay</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, u8g2_cleardisplay.o(i.u8g2_ClearDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = u8g2_ClearDisplay &rArr; u8g2_NextPage &rArr; u8g2_send_buffer &rArr; u8x8_DrawTile
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetBufferCurrTileRow
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_NextPage
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_FirstPage
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyU8G2_Init
</UL>

<P><STRONG><a name="[92]"></a>u8g2_DrawBox</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, u8g2_box.o(i.u8g2_DrawBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = u8g2_DrawBox &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawHVLine
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_IsIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightOn
</UL>

<P><STRONG><a name="[6f]"></a>u8g2_DrawFrame</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, u8g2_box.o(i.u8g2_DrawFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = u8g2_DrawFrame &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawHVLine
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_IsIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI
</UL>

<P><STRONG><a name="[106]"></a>u8g2_DrawGlyph</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, u8g2_font.o(i.u8g2_DrawGlyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_get_glyph_data
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_draw_string
</UL>

<P><STRONG><a name="[105]"></a>u8g2_DrawHVLine</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, u8g2_hvline.o(i.u8g2_DrawHVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_clip_intersection2
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawHXBMP
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawFrame
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawBox
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_len
</UL>

<P><STRONG><a name="[10a]"></a>u8g2_DrawHXBMP</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, u8g2_bitmap.o(i.u8g2_DrawHXBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = u8g2_DrawHXBMP &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawHVLine
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_IsIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawXBMP
</UL>

<P><STRONG><a name="[70]"></a>u8g2_DrawStr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, u8g2_font.o(i.u8g2_DrawStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_draw_string
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Task
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Task
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Task
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainITF_Task
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Task
</UL>

<P><STRONG><a name="[71]"></a>u8g2_DrawXBMP</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, u8g2_bitmap.o(i.u8g2_DrawXBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = u8g2_DrawXBMP &rArr; u8g2_DrawHXBMP &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawHXBMP
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_IsIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightOn
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightOff
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Task
</UL>

<P><STRONG><a name="[101]"></a>u8g2_FirstPage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, u8g2_buffer.o(i.u8g2_FirstPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g2_FirstPage &rArr; u8g2_SetBufferCurrTileRow
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetBufferCurrTileRow
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearDisplay
</UL>

<P><STRONG><a name="[104]"></a>u8g2_IsIntersection</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, u8g2_intersection.o(i.u8g2_IsIntersection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g2_IsIntersection
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_is_intersection_decision_tree
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawXBMP
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawHXBMP
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawFrame
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawBox
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_glyph
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_apply_clip_window
</UL>

<P><STRONG><a name="[102]"></a>u8g2_NextPage</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, u8g2_buffer.o(i.u8g2_NextPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = u8g2_NextPage &rArr; u8g2_send_buffer &rArr; u8x8_DrawTile
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_RefreshDisplay
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetBufferCurrTileRow
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearBuffer
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_send_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearDisplay
</UL>

<P><STRONG><a name="[72]"></a>u8g2_SendBuffer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, u8g2_buffer.o(i.u8g2_SendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u8g2_SendBuffer &rArr; u8g2_send_buffer &rArr; u8x8_DrawTile
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_RefreshDisplay
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_send_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightOn
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightOff
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUI
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Task
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Task
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Task
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainITF_Task
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Task
</UL>

<P><STRONG><a name="[103]"></a>u8g2_SetBufferCurrTileRow</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, u8g2_buffer.o(i.u8g2_SetBufferCurrTileRow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g2_SetBufferCurrTileRow
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearDisplay
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_NextPage
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_FirstPage
</UL>

<P><STRONG><a name="[b3]"></a>u8g2_SetFont</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, u8g2_font.o(i.u8g2_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g2_SetFont &rArr; u8g2_read_font_info
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_read_font_info
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_UpdateRefHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyU8G2_SetFontTiny
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyU8G2_SetFontBig
</UL>

<P><STRONG><a name="[113]"></a>u8g2_SetFontPosBaseline</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g2_font.o(i.u8g2_SetFontPosBaseline))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetupBuffer
</UL>

<P><STRONG><a name="[112]"></a>u8g2_SetMaxClipWindow</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, u8g2_setup.o(i.u8g2_SetMaxClipWindow))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetupBuffer
</UL>

<P><STRONG><a name="[111]"></a>u8g2_SetupBuffer</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, u8g2_setup.o(i.u8g2_SetupBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g2_SetupBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetFontPosBaseline
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetMaxClipWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_Setup_ssd1306_i2c_128x64_noname_f
</UL>

<P><STRONG><a name="[af]"></a>u8g2_Setup_ssd1306_i2c_128x64_noname_f</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, u8g2_d_setup.o(i.u8g2_Setup_ssd1306_i2c_128x64_noname_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u8g2_Setup_ssd1306_i2c_128x64_noname_f &rArr; u8x8_Setup &rArr; u8x8_SetupMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_Setup
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetupBuffer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_m_16_8_f
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyU8G2_Init
</UL>

<P><STRONG><a name="[110]"></a>u8g2_UpdateRefHeight</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, u8g2_font.o(i.u8g2_UpdateRefHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g2_UpdateRefHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetFont
</UL>

<P><STRONG><a name="[11c]"></a>u8g2_add_vector_x</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, u8g2_font.o(i.u8g2_add_vector_x))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_len
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_glyph
</UL>

<P><STRONG><a name="[11d]"></a>u8g2_add_vector_y</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, u8g2_font.o(i.u8g2_add_vector_y))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_len
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_glyph
</UL>

<P><STRONG><a name="[117]"></a>u8g2_draw_hv_line_2dir</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, u8g2_hvline.o(i.u8g2_draw_hv_line_2dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g2_draw_hv_line_2dir
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_draw_l90_r0
</UL>

<P><STRONG><a name="[50]"></a>u8g2_draw_l90_r0</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, u8g2_setup.o(i.u8g2_draw_l90_r0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = u8g2_draw_l90_r0 &rArr; u8g2_draw_hv_line_2dir
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_draw_hv_line_2dir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g2_setup.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>u8g2_font_calc_vref_font</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, u8g2_font.o(i.u8g2_font_calc_vref_font))
<BR>[Address Reference Count : 1]<UL><LI> u8g2_font.o(i.u8g2_SetFontPosBaseline)
</UL>
<P><STRONG><a name="[119]"></a>u8g2_font_decode_get_signed_bits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, u8g2_font.o(i.u8g2_font_decode_get_signed_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = u8g2_font_decode_get_signed_bits &rArr; u8g2_font_decode_get_unsigned_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_get_unsigned_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_glyph
</UL>

<P><STRONG><a name="[11a]"></a>u8g2_font_decode_get_unsigned_bits</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, u8g2_font.o(i.u8g2_font_decode_get_unsigned_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = u8g2_font_decode_get_unsigned_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_glyph
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_get_signed_bits
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_setup_decode
</UL>

<P><STRONG><a name="[108]"></a>u8g2_font_decode_glyph</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, u8g2_font.o(i.u8g2_font_decode_glyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_IsIntersection
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_len
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_get_unsigned_bits
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_get_signed_bits
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_add_vector_y
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_add_vector_x
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_setup_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawGlyph
</UL>

<P><STRONG><a name="[11e]"></a>u8g2_font_decode_len</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, u8g2_font.o(i.u8g2_font_decode_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawHVLine
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_add_vector_y
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_add_vector_x
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_glyph
</UL>

<P><STRONG><a name="[107]"></a>u8g2_font_get_glyph_data</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, u8g2_font.o(i.u8g2_font_get_glyph_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g2_font_get_glyph_data
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_get_word
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawGlyph
</UL>

<P><STRONG><a name="[41]"></a>u8g2_gpio_and_delay_stm32</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, myu8g2.o(i.u8g2_gpio_and_delay_stm32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = u8g2_gpio_and_delay_stm32 &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SDA_W
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SCL_W
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myu8g2.o(i.MyU8G2_Init)
</UL>
<P><STRONG><a name="[10c]"></a>u8g2_is_intersection_decision_tree</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, u8g2_intersection.o(i.u8g2_is_intersection_decision_tree))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_IsIntersection
</UL>

<P><STRONG><a name="[4a]"></a>u8g2_ll_hvline_vertical_top_lsb</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, u8g2_ll_hvline.o(i.u8g2_ll_hvline_vertical_top_lsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = u8g2_ll_hvline_vertical_top_lsb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g2_d_setup.o(i.u8g2_Setup_ssd1306_i2c_128x64_noname_f)
</UL>
<P><STRONG><a name="[115]"></a>u8g2_m_16_8_f</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8g2_d_memory.o(i.u8g2_m_16_8_f))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_Setup_ssd1306_i2c_128x64_noname_f
</UL>

<P><STRONG><a name="[10f]"></a>u8g2_read_font_info</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, u8g2_font.o(i.u8g2_read_font_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g2_read_font_info
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_get_word
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetFont
</UL>

<P><STRONG><a name="[4e]"></a>u8g2_update_dimension_r0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, u8g2_setup.o(i.u8g2_update_dimension_r0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = u8g2_update_dimension_r0 &rArr; u8g2_update_dimension_common
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_update_dimension_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g2_setup.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>u8g2_update_page_win_r0</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, u8g2_setup.o(i.u8g2_update_page_win_r0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = u8g2_update_page_win_r0 &rArr; u8g2_apply_clip_window &rArr; u8g2_IsIntersection
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_apply_clip_window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g2_setup.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>u8x8_DrawTile</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, u8x8_display.o(i.u8x8_DrawTile))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8x8_DrawTile
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_send_buffer
</UL>

<P><STRONG><a name="[b0]"></a>u8x8_InitDisplay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8x8_display.o(i.u8x8_InitDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8x8_InitDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyU8G2_Init
</UL>

<P><STRONG><a name="[10e]"></a>u8x8_RefreshDisplay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8x8_display.o(i.u8x8_RefreshDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8x8_RefreshDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SendBuffer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_NextPage
</UL>

<P><STRONG><a name="[b1]"></a>u8x8_SetPowerSave</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8x8_display.o(i.u8x8_SetPowerSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8x8_SetPowerSave
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyU8G2_Init
</UL>

<P><STRONG><a name="[114]"></a>u8x8_Setup</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, u8x8_setup.o(i.u8x8_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = u8x8_Setup &rArr; u8x8_SetupMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_SetupDefaults
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_SetupMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_Setup_ssd1306_i2c_128x64_noname_f
</UL>

<P><STRONG><a name="[122]"></a>u8x8_SetupDefaults</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, u8x8_setup.o(i.u8x8_SetupDefaults))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_Setup
</UL>

<P><STRONG><a name="[123]"></a>u8x8_SetupMemory</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8x8_display.o(i.u8x8_SetupMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8x8_SetupMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_Setup
</UL>

<P><STRONG><a name="[46]"></a>u8x8_ascii_next</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, u8x8_8x8.o(i.u8x8_ascii_next))
<BR>[Address Reference Count : 1]<UL><LI> u8g2_font.o(i.u8g2_DrawStr)
</UL>
<P><STRONG><a name="[126]"></a>u8x8_byte_EndTransfer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8x8_byte.o(i.u8x8_byte_EndTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8x8_byte_EndTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_ssd13xx_fast_i2c
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_i2c_data_transfer
</UL>

<P><STRONG><a name="[128]"></a>u8x8_byte_SendByte</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, u8x8_byte.o(i.u8x8_byte_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8x8_byte_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_ssd13xx_fast_i2c
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_i2c_data_transfer
</UL>

<P><STRONG><a name="[127]"></a>u8x8_byte_StartTransfer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8x8_byte.o(i.u8x8_byte_StartTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8x8_byte_StartTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_ssd13xx_fast_i2c
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_i2c_data_transfer
</UL>

<P><STRONG><a name="[42]"></a>u8x8_byte_sw_i2c</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, u8x8_byte.o(i.u8x8_byte_sw_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u8x8_byte_sw_i2c &rArr; i2c_write_byte &rArr; i2c_write_bit &rArr; i2c_read_scl_and_delay &rArr; u8x8_gpio_call
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_gpio_call
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_sda
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_scl_and_delay
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clear_sda
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clear_scl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myu8g2.o(i.MyU8G2_Init)
</UL>
<P><STRONG><a name="[130]"></a>u8x8_cad_EndTransfer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8x8_cad.o(i.u8x8_cad_EndTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8x8_cad_EndTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_sh1106_generic
</UL>

<P><STRONG><a name="[12f]"></a>u8x8_cad_SendArg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8x8_cad.o(i.u8x8_cad_SendArg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8x8_cad_SendArg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_sh1106_generic
</UL>

<P><STRONG><a name="[12e]"></a>u8x8_cad_SendCmd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8x8_cad.o(i.u8x8_cad_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8x8_cad_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_sh1106_generic
</UL>

<P><STRONG><a name="[125]"></a>u8x8_cad_SendData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8x8_cad.o(i.u8x8_cad_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8x8_cad_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_sh1106_generic
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendSequence
</UL>

<P><STRONG><a name="[124]"></a>u8x8_cad_SendSequence</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, u8x8_cad.o(i.u8x8_cad_SendSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = u8x8_cad_SendSequence &rArr; u8x8_cad_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_gpio_call
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_128x64_noname
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_sh1106_generic
</UL>

<P><STRONG><a name="[12d]"></a>u8x8_cad_StartTransfer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, u8x8_cad.o(i.u8x8_cad_StartTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8x8_cad_StartTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_sh1106_generic
</UL>

<P><STRONG><a name="[48]"></a>u8x8_cad_ssd13xx_fast_i2c</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, u8x8_cad.o(i.u8x8_cad_ssd13xx_fast_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = u8x8_cad_ssd13xx_fast_i2c &rArr; u8x8_i2c_data_transfer &rArr; u8x8_byte_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_i2c_data_transfer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_StartTransfer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_SendByte
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_EndTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g2_d_setup.o(i.u8g2_Setup_ssd1306_i2c_128x64_noname_f)
</UL>
<P><STRONG><a name="[12a]"></a>u8x8_d_helper_display_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, u8x8_display.o(i.u8x8_d_helper_display_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8x8_d_helper_display_init &rArr; u8x8_gpio_call
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_gpio_call
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_128x64_noname
</UL>

<P><STRONG><a name="[12c]"></a>u8x8_d_helper_display_setup_memory</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, u8x8_display.o(i.u8x8_d_helper_display_setup_memory))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_128x64_noname
</UL>

<P><STRONG><a name="[49]"></a>u8x8_d_ssd1306_128x64_noname</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, u8x8_d_ssd1306_128x64_noname.o(i.u8x8_d_ssd1306_128x64_noname))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = u8x8_d_ssd1306_128x64_noname &rArr; u8x8_d_ssd1306_sh1106_generic &rArr; u8x8_cad_SendSequence &rArr; u8x8_cad_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_helper_display_setup_memory
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_helper_display_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_sh1106_generic
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendSequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g2_d_setup.o(i.u8g2_Setup_ssd1306_i2c_128x64_noname_f)
</UL>
<P><STRONG><a name="[4b]"></a>u8x8_dummy_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, u8x8_setup.o(i.u8x8_dummy_cb))
<BR>[Address Reference Count : 1]<UL><LI> u8x8_setup.o(i.u8x8_SetupDefaults)
</UL>
<P><STRONG><a name="[d6]"></a>u8x8_gpio_call</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, u8x8_gpio.o(i.u8x8_gpio_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8x8_gpio_call
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_sw_i2c
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_helper_display_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendSequence
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_sda
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_scl_and_delay
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clear_sda
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clear_scl
</UL>

<P><STRONG><a name="[118]"></a>u8x8_utf8_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8x8_8x8.o(i.u8x8_utf8_init))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_draw_string
</UL>

<P><STRONG><a name="[de]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[f2]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.uxTaskGetNumberOfTasks))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[e2]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[ed]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[df]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[136]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[e1]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[e3]"></a>vPortExitCritical</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[eb]"></a>vPortFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[138]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[e5]"></a>vQueueAddToRegistry</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[fb]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[81]"></a>vTaskDelay</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayMusic
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightTwinkle
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemMove_Right
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemMove_Left
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Task
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Task
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Task
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Task
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainITF_Task
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Task
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Task
</UL>

<P><STRONG><a name="[13c]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[fd]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[132]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[131]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[7f]"></a>vTaskResume</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tasks.o(i.vTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskResume
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayMusic
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Task
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Task
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Task
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Task
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainITF_Task
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Task
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Task
</UL>

<P><STRONG><a name="[68]"></a>vTaskStartScheduler</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAllTask
</UL>

<P><STRONG><a name="[80]"></a>vTaskSuspend</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, tasks.o(i.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayMusic
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Task
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Task
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Task
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Task
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainITF_Task
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Task
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Task
</UL>

<P><STRONG><a name="[f9]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[54]"></a>vTaskSwitchContext</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[135]"></a>xPortStartScheduler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[66]"></a>xQueueGenericCreate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAllTask
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[13a]"></a>xQueueGenericReset</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[13b]"></a>xQueueGenericSend</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[75]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>xQueueReceive</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayMusic
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightTwinkle
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Task
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Task
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Task
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Task
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainITF_Task
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Task
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Task
</UL>

<P><STRONG><a name="[13d]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[67]"></a>xTaskCreate</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAllTask
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[13f]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[64]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAllTask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainClock_Callback
</UL>

<P><STRONG><a name="[c6]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e9]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[f3]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[fa]"></a>xTaskResumeAll</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[63]"></a>xTimerCreate</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAllTask
</UL>

<P><STRONG><a name="[134]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[65]"></a>xTimerGenericCommand</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateAllTask
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c7]"></a>SetSysClockTo72</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e6]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[e8]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[f0]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[f1]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(i.prvNotifyQueueSetContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[fc]"></a>prvUnlockQueue</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[dd]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[e0]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[ea]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[4c]"></a>prvIdleTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[ec]"></a>prvInitialiseNewTask</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[137]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[133]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.prvTaskIsTaskSuspended))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[e4]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[ef]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[f4]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[f6]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvProcessReceivedCommands &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[f8]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[f5]"></a>prvReloadTimer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvReloadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[f7]"></a>prvSampleTimeNow</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = prvSampleTimeNow &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[4d]"></a>prvTimerTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[45]"></a>prvTaskExitError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[ff]"></a>prvHeapInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[100]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[10d]"></a>u8g2_send_buffer</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, u8g2_buffer.o(i.u8g2_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8g2_send_buffer &rArr; u8x8_DrawTile
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_DrawTile
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SendBuffer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_NextPage
</UL>

<P><STRONG><a name="[10b]"></a>u8g2_draw_string</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, u8g2_font.o(i.u8g2_draw_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine &rArr; u8g2_clip_intersection2
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_utf8_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawGlyph
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawStr
</UL>

<P><STRONG><a name="[11f]"></a>u8g2_font_get_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, u8g2_font.o(i.u8g2_font_get_word))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_read_font_info
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_get_glyph_data
</UL>

<P><STRONG><a name="[11b]"></a>u8g2_font_setup_decode</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, u8g2_font.o(i.u8g2_font_setup_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g2_font_setup_decode &rArr; u8g2_font_decode_get_unsigned_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_get_unsigned_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_glyph
</UL>

<P><STRONG><a name="[109]"></a>u8g2_clip_intersection2</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, u8g2_hvline.o(i.u8g2_clip_intersection2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = u8g2_clip_intersection2
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawHVLine
</UL>

<P><STRONG><a name="[116]"></a>u8g2_apply_clip_window</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, u8g2_setup.o(i.u8g2_apply_clip_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = u8g2_apply_clip_window &rArr; u8g2_IsIntersection
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_IsIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_update_page_win_r0
</UL>

<P><STRONG><a name="[121]"></a>u8g2_update_dimension_common</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, u8g2_setup.o(i.u8g2_update_dimension_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = u8g2_update_dimension_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_update_dimension_r0
</UL>

<P><STRONG><a name="[d5]"></a>i2c_clear_scl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8x8_byte.o(i.i2c_clear_scl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_clear_scl &rArr; u8x8_gpio_call
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_gpio_call
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_sw_i2c
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_bit
</UL>

<P><STRONG><a name="[d7]"></a>i2c_clear_sda</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8x8_byte.o(i.i2c_clear_sda))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_clear_sda &rArr; u8x8_gpio_call
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_gpio_call
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_sw_i2c
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_bit
</UL>

<P><STRONG><a name="[d8]"></a>i2c_delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, u8x8_byte.o(i.i2c_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_delay &rArr; u8x8_gpio_call
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_gpio_call
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_sw_i2c
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_bit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_scl_and_delay
</UL>

<P><STRONG><a name="[d9]"></a>i2c_read_scl_and_delay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, u8x8_byte.o(i.i2c_read_scl_and_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_read_scl_and_delay &rArr; u8x8_gpio_call
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_gpio_call
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_sw_i2c
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_bit
</UL>

<P><STRONG><a name="[da]"></a>i2c_read_sda</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8x8_byte.o(i.i2c_read_sda))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_read_sda &rArr; u8x8_gpio_call
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_gpio_call
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_sw_i2c
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_bit
</UL>

<P><STRONG><a name="[db]"></a>i2c_write_bit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, u8x8_byte.o(i.i2c_write_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_write_bit &rArr; i2c_read_scl_and_delay &rArr; u8x8_gpio_call
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_sda
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_scl_and_delay
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clear_sda
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clear_scl
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
</UL>

<P><STRONG><a name="[dc]"></a>i2c_write_byte</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, u8x8_byte.o(i.i2c_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_write_byte &rArr; i2c_write_bit &rArr; i2c_read_scl_and_delay &rArr; u8x8_gpio_call
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_bit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_sda
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_scl_and_delay
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clear_scl
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_sw_i2c
</UL>

<P><STRONG><a name="[129]"></a>u8x8_i2c_data_transfer</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, u8x8_cad.o(i.u8x8_i2c_data_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8x8_i2c_data_transfer &rArr; u8x8_byte_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_StartTransfer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_SendByte
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_EndTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_ssd13xx_fast_i2c
</UL>

<P><STRONG><a name="[12b]"></a>u8x8_d_ssd1306_sh1106_generic</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, u8x8_d_ssd1306_128x64_noname.o(i.u8x8_d_ssd1306_sh1106_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u8x8_d_ssd1306_sh1106_generic &rArr; u8x8_cad_SendSequence &rArr; u8x8_cad_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_StartTransfer
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendSequence
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendData
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendCmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendArg
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_EndTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_128x64_noname
</UL>

<P><STRONG><a name="[ce]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$6
</UL>

<P><STRONG><a name="[d2]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d0]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[44]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
